<?php
function findPrimeNumberBad($positionInARow) {
    //все простые числа кроме 2 нечетные, поэтому частный случай выносим просто.
    if ($positionInARow === 1) {
        echo "A number 2 is a prime number. Position: 1";
        echo "<br>";
        return;
    }
    //это делитель
    $i = 3;
    //начинаем искать простые числа с трех, ибо двойка это частный случай.
    $j = 3;
    $times = 0;
    //количество найденных простых чисел. Считаем, что двойку уже нашли.
    $found = 1;
    $lastFoundPrimary = 2;
    while ($found <= $positionInARow) {
        //нет смысла искать делитель больше, чем корень числа, которое предполагается быть простым.
        while ($i <= pow($j, 0.5)) {
//        while ($i*$i <= $j) {
            //если нашли что хоть раз нет остатка от деления, то число это будет составным.
            if ($j % $i === 0) {
                $times++;
                break;
            }
            $i++;
        }

        //если число простое, то фиксируем +1 найденное простое число
        //и если оно будет тем порядковым номером простого числа, что мы ищем, то и отдаем и все на этом.
        if ($times === 0) {
            $found++;
            if ($found === $positionInARow) {
                echo "A number " . $j . " is a prime number. Position: " . $found;
                echo "<br>";
            }
        }

        //сбрасываем делить и счетчик целочисленного деления.
        $i = 2;
        $times = 0;
        $lastFoundPrimary = $j;
        //простое число за исключением двойки не может быть четным
        $j += 2;
    }
}

function findPrimeNumberBetter($positionInARow) {
    //все простые числа кроме 2 нечетные, поэтому частный случай выносим.
    if ($positionInARow === 1) {
        echo "A number 2 is a prime number. Position: 1";
        echo "<br>";
        return;
    }
    //Делители будем искать среди целых чисел, которые меньше квадратного корня из анализируемого числа.
    //Нам известно, что двойка это просто число, исходя из условия выше.
    $primaryNumbers = [2];
    //начинаем искать простые числа с трех, ибо двойка это частный случай.
    $j = 3;
    //количество раз целочисленного деления анализируемого числа
    $times = 0;
    //количество найденных простых чисел. Считаем, что двойку уже нашли.
    $found = 1;
    //ищем пока не дойдем до искомого по счету простого числа
    while ($found <= $positionInARow) {
        //нет смысла искать делитель больше, чем корень числа, которое предполагается быть простым.
        //делители следует искать среди простых чисел

        //получаем квадратный корень анализируемого числа
        $powerOfCurrentNumber = pow($j, 0.5);
        //если этот корень целое число, то анализируемое число составное, нет смысла что-то смотреть еще.
        if (is_int($powerOfCurrentNumber)) {
            //простое число за исключением двойки не может быть четным
            $j += 2;
            continue;
        }
        //в противном случае ищем делитель среди простых чисел, меньших чем квадратный корень анализируемого числа
        foreach ($primaryNumbers as $i) {
            if ($i > $powerOfCurrentNumber) {
                break;
            }
            //нашли хоть раз целочисленный остаток от деления - число составное
            if ($j % $i === 0) {
                $times++;
                break;
            }
        }

        //если число простое, то фиксируем +1 найденное простое число
        //и если оно будет тем порядковым номером простого числа, что мы ищем, то и отдаем и все на этом.
        if ($times === 0) {
            $found++;
            if ($found === $positionInARow) {
                echo "A number " . $j . " is a prime number. Position: " . $found;
                echo "<br>";
            }
            //нашли просто число, закидываем его в наш список простых чисел
            $primaryNumbers[] = $j;
        }

        //обнуляем счетчик деления без остатка
        $times = 0;
        //простое число за исключением двойки не может быть четным
        $j += 2;
    }
}

$start = microtime(true);
findPrimeNumberBad(10001);
echo PHP_EOL;
echo microtime(true) - $start;
echo PHP_EOL;
$start = microtime(true);
findPrimeNumberBetter(10001); // для шестого простого числа работает одинаково, но чтобы найти 10001 простое число работает в 10 раз быстрее
echo PHP_EOL;
echo microtime(true) - $start;